import numpy as np
import pandas as pd
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split


# Load the email dataset
df = pd.read_csv("""/content/spam.csv""", encoding='latin-1')

print(df)

data=df.where((pd.notnull(df)) ,'')

data.head(10)
data.info()
data.shape

data.loc[data['v1'] == 'spam', 'v1'] = 0
data.loc[data['v2']== 'ham','v2'] = 1


# Preprocess the data
X = data['v2']
y = data['v1']

print (X)
print(y)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.25, random_state=42)

print(X.shape)
print(X_train.shape)
print(X_test.shape)
print(y.shape)
print(y_train.shape)
print(y_test.shape)
# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Create a TfidfVectorizer object
tfidf_vectorizer = TfidfVectorizer(min_df=1, stop_words='english')

# Fit and transform the training data
X_train_features = tfidf_vectorizer.fit_transform(X_train)

# Transform the test data
X_test_features = tfidf_vectorizer.transform(X_test)

y_train = y_train.astype('int')
y_test = y_test.astype('int')



# Train the Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)

# Evaluate the model on the test set
y_pred = model.predict(X_test)
accuracy = np.mean(y_pred == y_test)
print('Accuracy:', accuracy)

# Make a prediction on a new email
new_email = 'This is a spam email.'
X_new = vectorizer.transform([new_email])
y_pred = model.predict(X_new)

if y_pred[0] == 1:
    print('The email is spam.')
else:
    print('The email is not spam.')